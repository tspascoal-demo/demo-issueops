name: Create repository
on:
  issues:
    types: [opened]

jobs:
  Create-Repo:
    runs-on: ubuntu-latest
    #if: contains(github.event.issues.labels.*.name, 'issueops')
    steps:
      - name: Dump GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        
      - name: Print Context
        uses: actions/github-script@v4
        with:
          script: |
            console.log(context)
            
      - name: Create GitHub repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.CUSTOM_TOKEN }}
          script: |
            console.log(context.payload.issue.body)
            
            bodySplit = context.payload.issue.body.split("\n")
            console.log("New repository name: " + bodySplit[2])
            console.log("Template Repository: " + bodySplit[6])
            console.log("Team: " + bodySplit[10])
            console.log("Enable Issue: " +  bodySplit[14].includes("X"))
            console.log("Enable Project: " +  bodySplit[18].includes("X"))
            console.log("Allow Squash Merge: " +  bodySplit[22].includes("X"))
            console.log("Allow Forking: " +  bodySplit[26].includes("X"))

            let newRepo = bodySplit[2].trim()
            let templateRepo = bodySplit[6]
            let teams = bodySplit[10].split(",")
            let enableIssue = bodySplit[14].includes("X")
            let enableProject = bodySplit[18].includes("X")
            let enableSquashMerge = bodySplit[22].includes("X")
            let enableForking = bodySplit[26].includes("X")
            
            console.log("New repo: " + newRepo + " Template Repo: " + templateRepo + " Teams: " + teams)

            var repo;
            try {
              repo = await github.rest.repos.get({
                  name: newRepo,
                  owner: context.payload.organization.login
              });
            } catch(err) {
              console.log(err);
            }

            if(repo) {
              console.log(`::error title=Repo Already exists::${newRepo} already exists`);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `@${context.actor} repo ${newRepo} already exists.`
              })
              return
            }

            if(!templateRepo || templateRepo.length === 0 || templateRepo === "_No response_") {
              try {
                // https://octokit.github.io/rest.js/v18#repos-create-in-org
                await github.rest.repos.createInOrg({
                  name: newRepo,
                  org: context.payload.organization.login,
                  description: "Test",
                  auto_init: true,
                  visibility: "private"
                })
              } catch(err) {
                throw err
              }
            } else { // TEMPLATE
              try {
                await github.rest.repos.createUsingTemplate({
                  template_owner: context.payload.organization.login,
                  template_repo: templateRepo,
                  name: newRepo,
                  owner: context.payload.organization.login,
                  description: "Test",
                  include_all_branches: true,
                  private: true
                })
              } catch(err) {
                throw err
              }
            }            
            
            try { 
              await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${context.actor} Thanks for creating a repo. Your new repo is available at: https://github.com/  ${context.payload.organization.login}/${newRepo}`
             }) 
            } catch(err) {
                await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `something went very wrong. Could not create repo ${newRepo} with error: ${err}`
              })
              throw err
            }
            
            
            

          
      
         





